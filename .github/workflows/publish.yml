name: publish

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/authentication-server:latest

jobs:
  build:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Build with Gradle
        run: ./gradlew build

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.PAT }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build . -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy:
    needs: build
    name: Deploy Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH Key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Connect to Server and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            docker stop spring-boot-container || true
            docker rm spring-boot-container || true
            docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} || true
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            docker run -d \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              -e DB_SOURCE=${{ secrets.DB_SOURCE }} \
              -e DB_DRIVER=${{ secrets.DB_DRIVER }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e JWT_LONGEVITY=${{ secrets.JWT_LONGEVITY }} \
              -e JWT_REFRESH_TOKEN_LONGEVITY=${{ secrets.JWT_REFRESH_TOKEN_LONGEVITY }} \
              -e OTP_LONGEVITY=${{ secrets.OTP_LONGEVITY }} \
              -e SPRING_MAIL_HOST=${{ secrets.SPRING_MAIL_HOST }} \
              -e SPRING_MAIL_PORT=${{ secrets.SPRING_MAIL_PORT }} \
              -e SPRING_MAIL_USER=${{ secrets.SPRING_MAIL_USER }} \
              -e SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }} \
              -p 8081:8080 \
              --name authentication-server-container \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            exit
          EOF

      - name: Clean SSH Key
        run: rm -rf ~/.ssh